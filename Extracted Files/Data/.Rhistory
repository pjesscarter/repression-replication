cutoffs <- c(3:5,10,20)
for(i in seq_along(cutoffs)){
models[[i]]<-fitlm(treat = paste("cutoff",cutoffs[i],sep=""),
outcome = "shVictims_70",
sample = "nona",
weights= T)
}
stargazer(models,
style="apsr",paste0(cutoffs, " Miles"),
keep=paste0("cutoff",cutoffs),
covariate.labels = c("Treatment Indicator"),
dep.var.labels = c("Victimization"),
keep.stat = c("n"))
#Voter registration
for(i in seq_along(cutoffs)){
models[[i]]<-fitlm(treat = paste("cutoff",cutoffs[i],sep=""),
outcome = "Share_reg70_w2",
sample = "nona",
weights= T)
}
stargazer(models,
style="apsr",paste0(cutoffs, " Miles"),
keep=paste0("cutoff",cutoffs),
covariate.labels = c("Treatment Indicator"),
dep.var.labels = c("Voter Registration"),
keep.stat = c("n"))
#Voter registration
for(i in seq_along(cutoffs)){
models[[i]]<-fitlm(treat = paste("cutoff",cutoffs[i],sep=""),
outcome = "VoteShareNo",
sample = "nona",
weights= T)
}
stargazer(models,
style="apsr",paste0(cutoffs, " Miles"),
keep=paste0("cutoff",cutoffs),
covariate.labels = c("Treatment Indicator"),
dep.var.labels = c("NO Vote Share"),
keep.stat = c("n"))
for(i in seq_along(cutoffs)){
models[[i]]<-fitlm(treat = paste("cutoff",cutoffs[i],sep=""),
outcome = "shVictims_70",
sample = "nona",
weights= F)
}
stargazer(models,
style="apsr",paste0(cutoffs, " Miles"),
keep=paste0("cutoff",cutoffs),
covariate.labels = c("Treatment Indicator"),
dep.var.labels = c("Victimization"),
keep.stat = c("n"))
#Voter registration
for(i in seq_along(cutoffs)){
models[[i]]<-fitlm(treat = paste("cutoff",cutoffs[i],sep=""),
outcome = "Share_reg70_w2",
sample = "nona",
weights= F)
}
stargazer(models,
style="apsr",paste0(cutoffs, " Miles"),
keep=paste0("cutoff",cutoffs),
covariate.labels = c("Treatment Indicator"),
dep.var.labels = c("Voter Registration"),
keep.stat = c("n"))
#Voter registration
for(i in seq_along(cutoffs)){
models[[i]]<-fitlm(treat = paste("cutoff",cutoffs[i],sep=""),
outcome = "VoteShareNo",
sample = "nona",
weights= F)
}
stargazer(models,
style="apsr",paste0(cutoffs, " Miles"),
keep=paste0("cutoff",cutoffs),
covariate.labels = c("Treatment Indicator"),
dep.var.labels = c("NO Vote Share"),
keep.stat = c("n"))
?rdrobust
rdrobust(y=fnl$shVictims_70,x=fnl$dist,c=3)
summary(rdrobust(y=fnl$shVictims_70,x=fnl$dist,c=3))
summary(rdrobust(y=fnl$shVictims_70,x=fnl$dist,c=2))
fnl$DVictims
fnl$DVictims_p75
#Repeat with a latent fuzzy RD design - treatment variable is victims above the 75th
#percentile
#Compute bandwidth using rdbwselect, use default values for other variables for now
summary(rdrobust(y=fnl$shVictims_70,x=fnl$dist,fuzzy = fnl$DVictims_p75,
deriv =0,
c=2,
p=1,
q=2,
kernel = "triangular"))
#Repeat with a latent fuzzy RD design - treatment variable is victims above the 75th
#percentile
#Compute bandwidth using rdbwselect, use default values for other variables for now
summary(rdrobust(y=fnl$shVictims_70,x=fnl$dist,fuzzy = fnl$DVictims_p75,
deriv =0,
c=3,
p=1,
q=2,
kernel = "triangular"))
#Repeat with a latent fuzzy RD design - treatment variable is victims above the 75th
#percentile
#Compute bandwidth using rdbwselect, use default values for other variables for now
summary(rdrobust(y=fnl$shVictims_70,x=fnl$dist,fuzzy = fnl$DVictims_p75,
deriv =0,
c=2,
p=1,
q=2,
kernel = "epanechnikov"))
#Repeat with a latent fuzzy RD design - treatment variable is victims above the 75th
#percentile
#Compute bandwidth using rdbwselect, use default values for other variables for now
summary(rdrobust(y=fnl$shVictims_70,x=fnl$dist,fuzzy = fnl$DVictims_p75,
deriv =0,
c=1,
p=1,
q=2,
kernel = "triangular"))
#Repeat with a latent fuzzy RD design - treatment variable is victims above the 75th
#percentile
#Compute bandwidth using rdbwselect, use default values for other variables for now
summary(rdrobust(y=fnl$shVictims_70,x=fnl$dist,fuzzy = fnl$DVictims_p75,
deriv =0,
c=3,
p=1,
q=2,
kernel = "triangular"))
#Repeat with a latent fuzzy RD design - treatment variable is victims above the 75th
#percentile
#Compute bandwidth using rdbwselect, use default values for other variables for now
summary(rdrobust(y=fnl$shVictims_70,x=fnl$dist,fuzzy = fnl$DVictims_p75,
deriv =0,
c=4,
p=1,
q=2,
kernel = "triangular"))
#Repeat with a latent fuzzy RD design - treatment variable is victims above the 75th
#percentile
#Compute bandwidth using rdbwselect, use default values for other variables for now
m <-rdrobust(y=fnl$shVictims_70,x=fnl$dist,fuzzy = fnl$DVictims_p75,
deriv =0,
c=4,
p=1,
q=2,
kernel = "triangular")
m$pv
m$pv[1,3]
m$pv[3]
fnl$dist
fnl$dist[fnl$dist<10]
fnl$dist[fnl$dist<20]
fnl$dist[fnl$dist<2]
fnl$dist[fnl$dist<3]
cutoffs <- seq(2,20,0.1)
#Store point estimate along with robust SE and p-value, plus cutoff
store <- matrix(nrow = length(cutoffs),ncol=4)
?tryCatch
m$Estimate
?rdrobust
m$coef
m$se
m$pv
cutoffs <- seq(2,20,0.1)
#Store point estimate along with robust SE and p-value, plus cutoff
store <- matrix(nrow = length(cutoffs),ncol=4)
for(i in seq_along(cutoffs)){
m <-tryCatch({rdrobust(y=fnl$shVictims_70,x=fnl$dist,fuzzy = fnl$DVictims_p75,
deriv =0,
c=cutoffs[i],
p=1,
q=2,
kernel = "triangular")},
error = function(e) e
)
store[i,] <- c(m$coef[3],m$se[3],m$pv[0.7810025],cutoffs[i])
}
#Store point estimate along with robust SE and p-value, plus cutoff
store <- matrix(nrow = length(cutoffs),ncol=4)
#Store point estimate along with robust SE and p-value, plus cutoff
store <- matrix(nrow = length(cutoffs),ncol=4)
#Store point estimate along with robust SE and p-value, plus cutoff
store <- matrix(nrow = length(cutoffs),ncol=4)
for(i in seq_along(cutoffs)){
m <-tryCatch({rdrobust(y=fnl$shVictims_70,x=fnl$dist,fuzzy = fnl$DVictims_p75,
deriv =0,
c=cutoffs[i],
p=1,
q=2,
kernel = "triangular")},
error = function(e) e
)
store[i,] <- c(m$coef[3],m$se[3],m$pv[3],cutoffs[i])
}
View(store)
sum(store[,3]>0.05)
sum(store[,3]<0.05)
m <-tryCatch({rdrobust(y=fnl$shVictims_70,x=fnl$dist,fuzzy = fnl$DVictims_p75,
deriv =0,
c=cutoffs[1],
p=1,
q=2,
kernel = "triangular")},
error = function(e) e
)
m
cutoffs <- seq(2,20,0.1)
#Store point estimate along with robust SE and p-value, plus cutoff
store <- matrix(nrow = length(cutoffs),ncol=4)
for(i in seq_along(cutoffs)){
m <-tryCatch({rdrobust(y=fnl$shVictims_70,x=fnl$dist,fuzzy = fnl$DVictims_p75,
deriv =0,
c=cutoffs[i],
p=1,
q=2,
kernel = "triangular")
store[i,] <- c(m$coef[3],m$se[3],m$pv[3],cutoffs[i])},
error = function(e) e
)
}
View(store)
m <-tryCatch({rdrobust(y=fnl$shVictims_70,x=fnl$dist,fuzzy = fnl$DVictims_p75,
deriv =0,
c=2.7,
p=1,
q=2,
kernel = "triangular")
)
m<-rdrobust(y=fnl$shVictims_70,x=fnl$dist,fuzzy = fnl$DVictims_p75,
+                        deriv =0,
+                        c=2.7,
+                        p=1,
+                        q=2,
+                        kernel = "triangular")
m<-rdrobust(y=fnl$shVictims_70,x=fnl$dist,fuzzy = fnl$DVictims_p75,
deriv =0,
c=2.7,
p=1,
q=2,
kernel = "triangular")
c(m$coef[3],m$se[3],m$pv[3],cutoffs[5])
m<-rdrobust(y=fnl$shVictims_70,x=fnl$dist,fuzzy = fnl$DVictims_p75,
deriv =0,
c=2,
p=1,
q=2,
kernel = "triangular")
m <-tryCatch({rdrobust(y=fnl$shVictims_70,x=fnl$dist,fuzzy = fnl$DVictims_p75,
deriv =0,
c=2,
p=1,
q=2,
kernel = "triangular")},
error = function(e) e
)
m <-tryCatch({rdrobust(y=fnl$shVictims_70,x=fnl$dist,fuzzy = fnl$DVictims_p75,
deriv =0,
c=2,
p=1,
q=2,
kernel = "triangular")},
error = function(e) NA
)
is.na(m)
#Store point estimate along with robust SE and p-value, plus cutoff
store <- matrix(nrow = length(cutoffs),ncol=4)
for(i in seq_along(cutoffs)){
m <-tryCatch({rdrobust(y=fnl$shVictims_70,x=fnl$dist,fuzzy = fnl$DVictims_p75,
deriv =0,
c=2,
p=1,
q=2,
kernel = "triangular")},
error = function(e) NA
)
if(!is.na(m)){
store[i,] <- c(m$coef[3],m$se[3],m$pv[3],cutoffs[i])},
+                error = function(e) e
+                )
}
cutoffs <- seq(2,20,0.1)
#Store point estimate along with robust SE and p-value, plus cutoff
store <- matrix(nrow = length(cutoffs),ncol=4)
for(i in seq_along(cutoffs)){
m <-tryCatch({rdrobust(y=fnl$shVictims_70,x=fnl$dist,fuzzy = fnl$DVictims_p75,
deriv =0,
c=2,
p=1,
q=2,
kernel = "triangular")},
error = function(e) NA
)
if(!is.na(m)){
store[i,] <- c(m$coef[3],m$se[3],m$pv[3],cutoffs[i])
}
}
View(store)
#Store point estimate along with robust SE and p-value, plus cutoff
store <- matrix(nrow = length(cutoffs),ncol=4)
for(i in seq_along(cutoffs)){
m <-tryCatch({rdrobust(y=fnl$shVictims_70,x=fnl$dist,fuzzy = fnl$DVictims_p75,
deriv =0,
c=cutoffs[i],
p=1,
q=2,
kernel = "triangular")},
error = function(e) NA
)
if(!is.na(m)){
store[i,] <- c(m$coef[3],m$se[3],m$pv[3],cutoffs[i])
}
}
View(store)
#Store point estimate along with robust SE and p-value, plus cutoff
store <- matrix(nrow = length(cutoffs),ncol=4)
for(i in seq_along(cutoffs)){
m <-tryCatch({rdrobust(y=fnl$shVictims_70,x=fnl$dist,fuzzy = fnl$DVictims_p75,
deriv =0,
c=cutoffs[i],
p=1,
q=2,
kernel = "epanechnikov")},
error = function(e) NA
)
if(!is.na(m)){
store[i,] <- c(m$coef[3],m$se[3],m$pv[3],cutoffs[i])
}
}
#Store point estimate along with robust SE and p-value, plus cutoff
store <- matrix(nrow = length(cutoffs),ncol=4)
for(i in seq_along(cutoffs)){
m <-tryCatch({rdrobust(y=fnl$shVictims_70,x=fnl$dist,fuzzy = fnl$DVictims_p75,
deriv =0,
c=cutoffs[i],
p=1,
q=2,
kernel = "epanechnikov",
masspoints="adjust",
subset = !is.na(fnl$IDProv))},
error = function(e) NA
)
if(!is.na(m)){
store[i,] <- c(m$coef[3],m$se[3],m$pv[3],cutoffs[i])
}
}
#Store point estimate along with robust SE and p-value, plus cutoff
store <- matrix(nrow = length(cutoffs),ncol=4)
for(i in seq_along(cutoffs)){
m <-tryCatch({rdrobust(y=fnl$shVictims_70,x=fnl$dist,fuzzy = fnl$DVictims_p75,
deriv =0,
c=cutoffs[i],
p=1,
q=2,
kernel = "epanechnikov",
masspoints="adjust",
subset = !is.na(fnl$IDProv),
covs = c(fnl$share_allende70,
fnl$share_alessandri70,
fnl$lnDistStgo,
fnl$lnDistRegCapital,
fnl$Pop70_pthousands,
fnl$sh_rural_70))},
error = function(e) NA
)
if(!is.na(m)){
store[i,] <- c(m$coef[3],m$se[3],m$pv[3],cutoffs[i])
}
}
View(store)
rdrobust(y=fnl$shVictims_70,x=fnl$dist,fuzzy = fnl$DVictims_p75,
deriv =0,
c=cutoffs[i],
p=1,
q=2,
kernel = "epanechnikov",
masspoints="adjust",
subset = !is.na(fnl$IDProv),
covs = list(fnl$share_allende70,
fnl$share_alessandri70,
fnl$lnDistStgo,
fnl$lnDistRegCapital,
fnl$Pop70_pthousands,
fnl$sh_rural_70))
#Store point estimate along with robust SE and p-value, plus cutoff
store <- matrix(nrow = length(cutoffs),ncol=4)
for(i in seq_along(cutoffs)){
m <-tryCatch({rdrobust(y=fnl$shVictims_70,x=fnl$dist,fuzzy = fnl$DVictims_p75,
deriv =0,
c=cutoffs[i],
p=1,
q=2,
kernel = "epanechnikov",
masspoints="adjust",
subset = !is.na(fnl$IDProv),
covs = cbind(fnl$share_allende70,
fnl$share_alessandri70,
fnl$lnDistStgo,
fnl$lnDistRegCapital,
fnl$Pop70_pthousands,
fnl$sh_rural_70))},
error = function(e) NA
)
if(!is.na(m)){
store[i,] <- c(m$coef[3],m$se[3],m$pv[3],cutoffs[i])
}
}
View(store)
View(store)
cutoffs[store[,3]<0.05]
store[store[,3]<0.05]
store[,4] <- cutoffs
store[store[,3]<0.05]
store[,4] <- cutoffs
store[store[,3]<0.05]
View(store)
store[store[,3]<0.05,]
store[,3]<0.05
which(store[,3]<0.05)
store[which(store[,3]<0.05),]
model.matrix( ~ IdProv - 1, data=iris )
model.matrix( ~ IdProv - 1, data=fnl )
model.matrix( ~ IdProv - 1, data=fnl)
fnl$IDProv
model.matrix( ~ IdProv - 1, data=fnl)
model.matrix( ~ IdProv, data=fnl)
model.matrix( ~ IDProv, data=fnl)
cutoffs <- seq(2,20,0.1)
#Store point estimate along with robust SE and p-value, plus cutoff
store <- matrix(nrow = length(cutoffs),ncol=4)
for(i in seq_along(cutoffs)){
m <-tryCatch({rdrobust(y=fnl$shVictims_70,x=fnl$dist,fuzzy = fnl$DVictims_p75,
deriv =0,
c=cutoffs[i],
p=1,
q=2,
kernel = "epanechnikov",
masspoints="adjust",
subset = !is.na(fnl$IDProv),
covs = cbind(fnl$share_allende70,
fnl$share_alessandri70,
fnl$lnDistStgo,
fnl$lnDistRegCapital,
fnl$Pop70_pthousands,
fnl$sh_rural_70,
model.matrix( ~ IDProv, data=fnl)))},
error = function(e) NA
)
if(!is.na(m)){
store[i,] <- c(m$coef[3],m$se[3],m$pv[3],cutoffs[i])
}
}
cbind(fnl$share_allende70,
fnl$share_alessandri70,
fnl$lnDistStgo,
fnl$lnDistRegCapital,
fnl$Pop70_pthousands,
fnl$sh_rural_70,
model.matrix( ~ IDProv, data=fnl))''
cbind(fnl$share_allende70,
fnl$share_alessandri70,
fnl$lnDistStgo,
fnl$lnDistRegCapital,
fnl$Pop70_pthousands,
fnl$sh_rural_70,
model.matrix( ~ IDProv, data=fnl))
cbind(fnl$share_allende70,
fnl$share_alessandri70,
fnl$lnDistStgo,
fnl$lnDistRegCapital,
fnl$Pop70_pthousands,
fnl$sh_rural_70)
rdrobust(y=fnl$shVictims_70,x=fnl$dist,fuzzy = fnl$DVictims_p75,
deriv =0,
c=cutoffs[i],
p=1,
q=2,
kernel = "epanechnikov",
masspoints="adjust",
subset = !is.na(fnl$IDProv),
covs = cbind(fnl$share_allende70,
fnl$share_alessandri70,
fnl$lnDistStgo,
fnl$lnDistRegCapital,
fnl$Pop70_pthousands,
fnl$sh_rural_70,
model.matrix( ~ IDProv, data=fnl)))
?model.matrixa
?model.matrix
#Store point estimate along with robust SE and p-value, plus cutoff
store <- matrix(nrow = length(cutoffs),ncol=4)
for(i in seq_along(cutoffs)){
m <-tryCatch({rdrobust(y=fnl$shVictims_70,x=fnl$dist,fuzzy = fnl$DVictims_p75,
deriv =0,
c=cutoffs[i],
p=1,
q=2,
kernel = "epanechnikov",
masspoints="adjust",
subset = !is.na(fnl$IDProv),
covs = cbind(fnl$share_allende70[!is.na(fnl$IDProv)],
fnl$share_alessandri70[!is.na(fnl$IDProv)],
fnl$lnDistStgo[!is.na(fnl$IDProv)],
fnl$lnDistRegCapital[!is.na(fnl$IDProv)],
fnl$Pop70_pthousands[!is.na(fnl$IDProv)],
fnl$sh_rural_70[!is.na(fnl$IDProv)],
model.matrix( ~ IDProv, data=fnl)))},
error = function(e) NA
)
if(!is.na(m)){
store[i,] <- c(m$coef[3],m$se[3],m$pv[3],cutoffs[i])
}
}
